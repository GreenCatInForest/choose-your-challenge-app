{
  "challenges": [
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Variable Types",
      "challengeTitle": "Creating Variables",
      "challengeTitle": "Create variables and assign a values. Concatenate a string with a number",
      "challengeDescription": "Declare multiple variables without assigning values. Assign different types of values (string, number, boolean) to variables and print them. Concatenate a string with multiple numbers using template literals. Create a function that concatenates any data type with a string.",
      "level": "basic"
    },

    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Conditionals",
      "challengeTitle": "Is Array?",
      "challengeDescription": "Implement the function to check if a variable is a specific type (e.g., object, number). Modify the function to handle nested arrays and objects.",
      "level": "basic"
    },

    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Template literals",
      "challengeTitle": "Template literals",
      "challengeDescription": "Use template literals to construct a dynamic string with variables.",
      "level": "basic"
    },

    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Function",
      "challengeTitle": "Reverse a string",
      "challengeDescription": "Write a function to reverse a given string without using the built-in reverse() method",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Function",
      "challengeTitle": "The word with highest frequency",
      "challengeDescription": "Create a function that takes a sentence as input and returns the word with the highest frequency. If there are multiple words with the same highest frequency, return the one that appears first. Count the occurrences of each character in a string.",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Function",
      "challengeTitle": "Variable Swap",
      "challengeDescription": "Write a function that takes two variables a and b and swaps their values without using a temporary variable.",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Function and Data Types",
      "challengeTitle": "Check Leap Year",
      "challengeDescription": "Write a function that takes a year as input and returns true if it's a leap year, otherwise false. A leap year is divisible by 4, but not by 100, unless it is divisible by 400."
    },

    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Variable and Data Types",
      "challengeTitle": "Difference between == and ===",
      "challengeDescription": "Compare two variables with different values and types using both == and === to see how they behave differently. Explore the difference between == and === when comparing objects and arrays.",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Variable and Data Types",
      "challengeTitle": "Variable converter",
      "challengeDescription": "Write a function that converts a string containing a number to an actual number using the appropriate equality operator",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Variable and Data Types",
      "challengeTitle": "PI",
      "challengeDescription": "Declare a constant variable for the value of pi and use it to calculate the circumference of a circle.",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Data Types and string methods",
      "challengeTitle": "Has a?",
      "challengeDescription": "Write a function that checks if a string contains the letter 'a' using the includes() method or indexOf()."
    },
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Data Types, Maths, numbers",
      "challengeTitle": "Decimal into binary",
      "challengeDescription": "Convert a decimal number to a binary representation.",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Data Types, NaN, undefined, null, Infinity",
      "challengeTitle": "Different data types of NaN",
      "challengeDescription": "Explore the different data types of NaN, undefined, null, and Infinity.",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Data Types, objects",
      "challengeTitle": "Destructure an object",
      "challengeDescription": "Destructure an object and extract its properties into variables."
    },
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Data Types, converting data types",
      "challengeTitle": "Convert a string containing numbers to an array of integers",
      "challengeDescription": "Implement a function that converts a string containing numbers to an array of integers.",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Variables and Data Types",
      "groupDescription": "All about variables and data types",
      "challengeType": "Basic challenges",
      "challengeSubtopic": "Variables, undefined and null",
      "challengeTitle": "Undefined vs Null:",
      "challengeDescription": "Declare a variable value without initializing it. Print the type and value of value. Then, assign null to value and print its type and value. Expected Output: undefined, undefined; object, null",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Variable Types, System Thinking",
      "challengeTitle": "Product Catalog System",
      "challengeDescription": "Build a product catalog system for an e-commerce platform. Define variables representing product names, prices, and categories. Initialize them with sample data. Demonstrate different data types for product information.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Variable Types and System Thinking",
      "challengeTitle": "User Profiles",
      "challengeDescription": "Develop a user profiles system for a social networking site. Declare variables for user names, ages, and interests. Initialize them with various data types, including strings, numbers, and arrays.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Variable Types and System Thinking",
      "challengeTitle": "Order Tracking",
      "challengeDescription": "Create an order tracking system for a restaurant. Declare variables for order numbers, menu items, and quantities. Initialize them with relevant data types, such as integers and arrays.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Variable Types and System Thinking",
      "challengeTitle": "Sensor Data",
      "challengeDescription": "Design a system for collecting sensor data in a smart home. Declare variables for temperature, humidity, and motion detection status. Initialize them with appropriate data types, like floats and booleans.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: Variables, Structure, System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Variable Types",
      "challengeTitle": "Customer Data",
      "challengeDescription": "Design a CRM system for a sales team. Declare variables for customer names, contact details, and purchase history. Initialize them with diverse data types, including strings, objects, and arrays.",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Variables",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Undefined and Null",
      "challengeTitle": "Data Initialization",
      "challengeDescription": "Develop a data entry system where users input personal details. Use undefined for optional fields that haven't been filled out yet, and null for intentionally empty fields.",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Variables",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Undefined and Null",
      "challengeTitle": "Default Values, User Preferences",
      "challengeDescription": "Create a function that accepts parameters for a user's preferences. Use null to indicate preferences that haven't been set yet, and provide default values for undefined preferences.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: Variables",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Validate User Inputs",
      "challengeTitle": "Checking for Values",
      "challengeDescription": "Write a script that validates user inputs in a form. Check for undefined and null values, and provide appropriate error messages for missing or incomplete data.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Build Management System",
      "challengeTitle": "Object Properties",
      "challengeDescription": "Build an employee management system. Use undefined to represent missing properties, such as phone numbers, and set properties to null to indicate intentionally empty values.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Undefined and Null",
      "challengeTitle": "Database Handling",
      "challengeDescription": "Design a database interface for an application. Use null to signify missing data when querying the database, and handle undefined values during data insertion.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Constants",
      "challengeTitle": "Maths Constants",
      "challengeDescription": "Create a math library that provides constants like pi and e. Declare these constants as const variables and use them in mathematical calculations throughout the library. Declare a constant variable PI and assign the value of the mathematical constant π (pi). Use it to calculate the circumference of a circle given its radius. Print the result.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Constants",
      "challengeTitle": "Configuration Settings",
      "challengeDescription": "Develop a configuration manager for a web application. Use const to define configuration settings that should remain constant during the application's lifecycle, such as API endpoints and default values.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Constants",
      "challengeTitle": "Physical Constants",
      "challengeDescription": "Build a physics simulation application. Declare constants for physical quantities like the speed of light, gravitational constant, and Planck's constant. Use these constants in simulations and calculations. Declare a constant variable SPEED_OF_LIGHT and assign the value of the speed of light in meters per second (299,792,458 m/s). Use it to calculate the time it takes for light to travel a certain distance. ",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Constants",
      "challengeTitle": "Conversion Factors",
      "challengeDescription": "Design a unit conversion utility. Declare constants for conversion factors between different units, such as length, weight, and temperature. Ensure these constants cannot be modified during runtime.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Constants",
      "challengeTitle": "Application-wide Parameters",
      "challengeDescription": "Create a global configuration object for a multi-module application. Define const variables to hold parameters shared across the application, such as authentication settings and API keys.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Constants",
      "challengeTitle": "Configurable Constants",
      "challengeDescription": "Define a constant variable MAX_USERS and set its value to 100. Use it in a function that simulates user registration. If the number of users exceeds MAX_USERS, display a message indicating that registration is closed.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Constants",
      "challengeTitle": "Time Constants",
      "challengeDescription": "Create a constant variable SECONDS_PER_MINUTE and set it to 60. Write a function that converts minutes to seconds using this constant. Test the function with various values.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Constants",
      "challengeTitle": "API Keys and Constants",
      "challengeDescription": "Imagine you're building an application that interacts with an external API. Declare a constant variable API_KEY and assign it a sample API key string. Use it in your API requests for authentication.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Scope and Block-Level Variables",
      "challengeTitle": "Local vs. Global",
      "challengeDescription": "Declare a global variable outside of any function and a local variable inside a function. Print both variables within and outside of the function to observe their scope behavior.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Scope and Block-Level Variables",
      "challengeTitle": "Block-Level Variables",
      "challengeDescription": "Write a function that uses a block-level variable declared with the let keyword. Access this variable both inside and outside of the block to demonstrate block-level scope.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Scope and Block-Level Variables",
      "challengeTitle": "Scope Chain",
      "challengeDescription": "Create a nested function that references a variable from its parent function's scope. Illustrate how the scope chain works by accessing the variable from within the nested function.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Scope and Block-Level Variables",
      "challengeTitle": "Function and Global Variables",
      "challengeDescription": "Declare a variable inside a function and another variable with the same name outside of any function (global scope). Print both variables and explain how JavaScript handles variable naming conflicts.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Scope and Block-Level Variables",
      "challengeTitle": "Lexical Scope",
      "challengeDescription": "Implement a function within another function. Declare a variable in the outer function's scope and try to access it from the inner function. Explain the concept of lexical scope.",
      "level": "complex"
    },

    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Scope and Block-Level Variables",
      "challengeTitle": "Variable Shadowing",
      "challengeDescription": "Create a scenario where a local variable has the same name as a global variable. Demonstrate how the local variable takes precedence within its scope, hiding the global variable.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Scope and Block-Level Variables",
      "challengeTitle": "Closures and Scope",
      "challengeDescription": "Develop a closure that accesses variables from its parent function's scope. Showcase how closures retain access to variables even after the parent function has completed execution.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Hoisting",
      "challengeTitle": "Variable Hoisting",
      "challengeDescription": "Declare a variable x and initialize it with a value. Write a function that tries to access the variable before it's declared within the function. Explain the concept of variable hoisting and the expected behavior.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Hoisting",
      "challengeTitle": "Function Hoisting:",
      "challengeDescription": "Declare a function multiply that takes two parameters and returns their product. Call the function before it's declared and explain how function hoisting allows this behavior.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Hoisting",
      "challengeTitle": "Block-Level Hoisting",
      "challengeDescription": "Inside a block of code (using curly braces), declare a variable y and initialize it with a value. Print the value of y within the block and outside of the block. Explain the behavior of block-level hoisting.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Coding Style and Best Practices",
      "challengeTitle": "Avoid Global Variables",
      "challengeDescription": "Create a code snippet that demonstrates the dangers of using global variables. Show how global variables can lead to unintended side effects and how to avoid them using local scope.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Coding Style and Best Practices",
      "challengeTitle": "Modularization",
      "challengeDescription": "Write a program that calculates the area of different shapes. Refactor the program by separating the area calculation logic into individual functions for each shape.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Common Mistakes and Debugging",
      "challengeTitle": "Debugging Tools",
      "challengeDescription": "Create a code snippet with a logical error (e.g., incorrect formula for calculating area). Use browser developer tools to set breakpoints and step through the code to identify and fix the error.",
      "level": "complex"
    },
    {
      "groupchallengeTitle": "Basic: System Thinking",
      "groupDescription": "Real world challenges",
      "challengeType": "Relevant to real industries",
      "challengeSubtopic": "Common Mistakes and Debugging",
      "challengeTitle": "Undefined Functions",
      "challengeDescription": "Write a function calculateArea that calculates the area of a rectangle. Call the function with incorrect parameters and explain the error message that occurs.",
      "level": "complex"
    },

    {
      "groupchallengeTitle": "Basic: Operators",
      "groupDescription": "Operators (Arithmetic, Comparison, Logical)",
      "challengeType": "Basic: Operators",
      "challengeSubtopic": "Common Mistakes and Debugging",
      "challengeTitle": "Undefined Functions",
      "challengeDescription": "Write a function calculateArea that calculates the area of a rectangle. Call the function with incorrect parameters and explain the error message that occurs.",
      "level": "basic"
    },

    {
      "groupchallengeTitle": "Basic: Operators",
      "groupDescription": "Operators (Arithmetic, Comparison, Logical)",
      "challengeType": "Basic: Operators",
      "challengeSubtopic": "Ternary Operator",
      "challengeTitle": "Positive or negative?",
      "challengeDescription": "Use the ternary operator to check if a number is positive or negative.",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Operators",
      "groupDescription": "Operators (Arithmetic, Comparison, Logical)",
      "challengeType": "Basic: Operators",
      "challengeSubtopic": "Bitwise Operators",
      "challengeTitle": "Manipulate binary values",
      "challengeDescription": "Use the bitwise operators (&, |, ^, <<, >>) to manipulate binary values. Implement a function that converts a decimal number to its binary representation using bitwise operations.",
      "level": "basic"
    },
    {
      "groupchallengeTitle": "Basic: Operators",
      "groupDescription": "Operators (Arithmetic, Comparison, Logical)",
      "challengeType": "Basic: Operators",
      "challengeSubtopic": "logical NOT Operators",
      "challengeTitle": "NOT operation",
      "challengeDescription": "Create a function that performs a logical NOT operation without using the ! operator.",
      "level": "basic"
    },

    {
      "groupchallengeTitle": "Basic: Operators",
      "groupDescription": "Operators (Arithmetic, Comparison, Logical)",
      "challengeType": "Basic: Operators",
      "challengeSubtopic": "logical in operator",
      "challengeTitle": "If a property exists?",
      "challengeDescription": "Use the in operator to check if a property exists in an object."
    },
    {
      "groupchallengeTitle": "Basic: Operators",
      "groupDescription": "Operators (Arithmetic, Comparison, Logical)",
      "challengeType": "Basic: Operators",
      "challengeSubtopic": "modulus operator",
      "challengeTitle": "Even or Odd",
      "challengeDescription": "Write a function to check if a given number is even or odd using the modulus operator."
    },
    {
      "groupchallengeTitle": "Basic: Operators",
      "groupDescription": "Operators (Arithmetic, Comparison, Logical)",
      "challengeType": "Basic: Operators",
      "challengeSubtopic": "comparison operator",
      "challengeTitle": "Are equal?",
      "challengeDescription": "Create a function that checks if two numbers are equal using a comparison operator."
    },
    {
      "groupchallengeTitle": "Basic: Operators",
      "groupDescription": "Operators (Arithmetic, Comparison, Logical)",
      "challengeType": "Basic: Operators",
      "challengeSubtopic": "comparison operator",
      "challengeTitle": "Is prime?",
      "challengeDescription": "Implement a function that checks if a given number is prime or not."
    },
    {
      "groupchallengeTitle": "Basic: Operators",
      "groupDescription": "Operators (Arithmetic, Comparison, Logical)",
      "challengeType": "Basic: Operators",
      "challengeSubtopic": "boolean values",
      "challengeTitle": "Combine boolean values",
      "challengeDescription": "Write a function that combines two boolean values using a logical operator and returns the result."
    },

    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Complex system",
      "challengeSubtopic": "Login system",
      "challengeTitle": "Login system",
      "challengeDescription": "Build a login system that checks if the username and password match predefined values using logical operators. Implement a toggle button that toggles the visibility of a password input field. Create a dynamic user profile card that displays the user's name, age, and favorite color. Implement a form validator that checks if the user's input is valid (e.g., email, phone number, password complexity). Implement a login form with different user roles (admin, user) that displays different challengeDescription based on the user's role."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Temperature converter",
      "challengeTitle": "Celsius converter",
      "challengeDescription": "Build a temperature converter that converts Celsius to Fahrenheit and vice versa."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Temperature converter",
      "challengeTitle": "Shopping cart",
      "challengeDescription": "Implement a shopping cart with product names, prices, and quantities. Calculate and display the total cost. Create a dynamic shopping cart that updates the total cost automatically when the quantity or price of a product changes."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Temperature converter",
      "challengeTitle": "Timer: set a target",
      "challengeDescription": "Create a countdown timer that allows the user to set a target date and time."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Converter",
      "challengeTitle": "Currency converter",
      "challengeDescription": "Build a currency converter that converts between different currencies using real-time exchange rates from an API."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Game",
      "challengeTitle": "Quiz game",
      "challengeDescription": "Create a quiz game with multiple-choice questions and display the score at the end and a message. Build a quiz app that provides different difficulty levels and adjusts the number of questions based on the user's choice. timer that counts down as the user answers questions using a for loop and setInterval(). "
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters Fetch API",
      "challengeSubtopic": "Fetch API",
      "challengeTitle": "Weather app",
      "challengeDescription": "Build a weather app that fetches real-time weather data for a specified location using a weather API. Create a temperature sensor app that warns the user if the temperature goes above a predefined threshold."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters Fetch API",
      "challengeSubtopic": "Fetch API",
      "challengeTitle": "BMI (Body Mass Index) calculator ",
      "challengeDescription": "Implement a BMI (Body Mass Index) calculator that takes height and weight inputs and provides the BMI category."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters Fetch API",
      "challengeSubtopic": "Calculator",
      "challengeTitle": "Calculator",
      "challengeDescription": "Build a calculator app with basic arithmetic operations (addition, subtraction, multiplication, division). Build a dynamic calculator app that allows users to chain multiple operations together (e.g., 2 + 3 * 4) and follows the order of operations (BODMAS)"
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters Fetch API",
      "challengeSubtopic": "Forms",
      "challengeTitle": "Subscribe form",
      "challengeDescription": "Build a subscribe form. Build a dynamic form that displays additional fields based on the user's selections (e.g., country-specific address fields)."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters Fetch API",
      "challengeSubtopic": "Game",
      "challengeTitle": "Guess the Number game",
      "challengeDescription": "Create a Guess the Number game where the user has to guess a randomly generated number within a range."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Game",
      "challengeTitle": "Color-changing button",
      "challengeDescription": "Implement a color-changing button that changes its color randomly on each click. Implement a function that generates a random color hex code and applies it as the background color of a div."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Game",
      "challengeTitle": "Rock-paper-scissors",
      "challengeDescription": "Implement a rock-paper-scissors game that takes user input and displays the result using comparison operators."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App",
      "challengeTitle": "Car rental app",
      "challengeDescription": "Build a car rental app that calculates the total cost based on the number of rental days and optional add-ons."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App",
      "challengeTitle": "Ticket booking system",
      "challengeDescription": "Build a ticket booking system with different ticket types (e.g., regular, premium, VIP) that calculates the total cost."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App Game",
      "challengeTitle": "Guess a randomly generated word",
      "challengeDescription": "Implement a game where the user has to guess a randomly generated word and provide feedback if it's correct or not. Build a Hangman game that allows the user to guess a word letter by letter using a while loop."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App",
      "challengeTitle": "Timer: Time Remaining",
      "challengeDescription": "Create a countdown timer that displays different messages based on the time remaining (e.g., Almost there, Time's up!)."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App",
      "challengeTitle": "Traffic light simulator",
      "challengeDescription": "Implement a traffic light simulator that changes colors based on predefined time intervals."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App",
      "challengeTitle": "Dynamic slideshow",
      "challengeDescription": "Create a dynamic slideshow that automatically transitions between images using a for loop."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App",
      "challengeTitle": "A progress bar",
      "challengeDescription": "Implement a progress bar that updates as the user fills out a multi-step form using a while loop."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App",
      "challengeTitle": "Calendar",
      "challengeDescription": "Build a calendar app that highlights the current date and displays events for each day using nested loops. Build a dynamic calendar that highlights weekends and holidays using a while loop and date functions."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App",
      "challengeTitle": "Contact form",
      "challengeDescription": "Build a contact form with reusable validation functions for email, phone number, and message inputs."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App",
      "challengeTitle": "Generates a random password",
      "challengeDescription": "Create a function that generates a random password with customizable length and complexity."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "API",
      "challengeSubtopic": "Real App",
      "challengeTitle": "Random Quote Generator",
      "challengeDescription": "Build a Random Quote Generator app that fetches quotes from an API and displays them using async/await functions."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App",
      "challengeTitle": "Validate credit card numbers, phone numbers, dates",
      "challengeDescription": "Implement a function that validates credit card numbers based on their formats and checksums. Create a function that validates and formats a phone number in a specific format (e.g., +1 (123) 456-7890). Create a function that validates and formats a date in a specific format (e.g., MM/DD/YYYY)."
    },
    {
      "groupchallengeTitle": "Portfolio Challenges",
      "groupDescription": "Real portfolio challenges",
      "challengeType": "Variable converters",
      "challengeSubtopic": "Real App",
      "challengeTitle": "Anagram checker, palindrome checker, Word Search Game",
      "challengeDescription": "Create a function to check if a given string is a palindrome or an anagram of another string (uses the same characters but rearranged). Create a Word Search game where users have to find words in a grid of letters using nested loops.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Magic 8-Ball app",
      "challengeDescription": "Implement a Magic 8-Ball app that provides random answers to yes-or-no questions using a switch statement.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Tic-Tac-Toe",
      "challengeDescription": "Build a dynamic Tic-Tac-Toe game with AI that uses if/else statements to determine the next move.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Infinite Scroll feature",
      "challengeDescription": "Build a dynamic Infinite Scroll feature that loads more challengeDescription as the user scrolls using a while loop and event listeners.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "E-commerce product gallery",
      "challengeDescription": "Create an e-commerce product gallery where users can view a list of products with images, names, prices, and ratings. Implement filters to allow users to sort and search for specific products based on various criteria.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Virtual Art Gallery",
      "challengeDescription": "Develop a virtual art gallery where users can explore and interact with famous artworks. Allow users to click on paintings for detailed information and a zoomed-in view.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Interactive Storytelling",
      "challengeDescription": "Create an interactive storytelling experience where users can make choices that affect the outcome of the story. Implement branching narratives and engaging plot twists.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Virtual Pet",
      "challengeDescription": "Design a virtual pet simulation where users can adopt and take care of virtual pets. Implement features like feeding, playing, and monitoring their health.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Travel Planner",
      "challengeDescription": "Develop a travel planner app that helps users plan their trips. Allow users to input their destinations, travel dates, and preferences, and provide them with a personalized itinerary.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Language Learning Game",
      "challengeDescription": "Create a language learning game where users can practice vocabulary and grammar in a fun and interactive way. Include quizzes, word associations, and pronunciation exercises.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Escape Room Game",
      "challengeDescription": "Design a virtual escape room game where users must solve puzzles and riddles to find their way out of a virtual room.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Time Management Tool",
      "challengeDescription": "Develop a time management tool that helps users track and manage their daily tasks, set reminders, and visualize their productivity.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Escape Room Game",
      "challengeDescription": "Design a virtual escape room game where users must solve puzzles and riddles to find their way out of a virtual room.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Escape Room Game",
      "challengeDescription": "Design a virtual escape room game where users must solve puzzles and riddles to find their way out of a virtual room.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Escape Room Game",
      "challengeDescription": "Design a virtual escape room game where users must solve puzzles and riddles to find their way out of a virtual room.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Escape Room Game",
      "challengeDescription": "Design a virtual escape room game where users must solve puzzles and riddles to find their way out of a virtual room.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Basic: Conditionals",
      "challengeDescriptio": "Conditionals (if/else, switch)",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink",
      "challengeTitle": "Weekday or Weekend",
      "challengeDescription": "Implement a function that takes a day of the week as input and returns a message based on whether it's a weekday or weekend"
    },
    {
      "challengeTitle": "Number checker",
      "challengeDescription": "Write a function that checks if a number is positive, negative, or zero and returns the result."
    },
    {
      "challengeTitle": "Type checker",
      "challengeDescription": "Write a function that checks a type of the variable. Use the typeof operator to check the data type of different variables (string, number, array, etc.)."
    },
    {
      "challengeTitle": "Convert a grades",
      "challengeDescription": "Implement a function that converts a numerical grade to a letter grade (A, B, C, etc.) using switch statements."
    },
    {
      "challengeTitle": "If a string contains the letter 'a'",
      "challengeDescription": "Write a function that checks if a string contains the letter 'a' and prints a message accordingly"
    },
    {
      "challengeTitle": "Ticket price",
      "challengeDescription": "Create a function that calculates the ticket price based on age using if/else statements. Create a function that calculates the discounted price of a ticket based on a percentage off."
    },
    {
      "challengeTitle": "Ascending/Descending order",
      "challengeDescription": "Create a function that sorts three numbers in ascending order using if/else statements."
    },
    {
      "challengeTitle": "Seasons",
      "challengeDescription": "Write a function that determines the season based on a given month using switch statements."
    },
    {
      "challengeTitle": "Check a given string",
      "challengeDescription": "Write a function that checks if a given string is apple, orange, banana."
    },
    {
      "challengeTitle": "&& and || operators",
      "challengeDescription": "Use the && and || operators to perform multiple condition checks."
    },
    {
      "challengeTitle": "Numbers into Grades",
      "challengeDescription": "Implement a function that assigns a grade (A, B, C, etc.) based on a numerical score."
    },
    {
      "challengeTitle": "Ascending order using conditional statements",
      "challengeDescription": "Create a function that sorts three numbers in ascending order using conditional statements."
    },
    {
      "challengeTitle": "Determine the time of day",
      "challengeDescription": "Implement a function to determine the time of day (morning, afternoon, evening) based on the current hour."
    },
    {
      "challengeTitle": "The larger",
      "challengeDescription": "Use the conditional (ternary) operator to find the larger of two numbers."
    },
    {
      "challengeTitle": "Checks if a given string contains the letter",
      "challengeDescription": "Write a function that checks if a given string contains the letter 'e' and 't' using a switch statement."
    },
    {
      "challengeTitle": "Type of a triangle",
      "challengeDescription": "Create a function that determines the type of a triangle (scalene, isosceles, equilateral) based on side lengths."
    },
    {
      "challengeTitle": "Type of a triangle",
      "challengeDescription": "Create a function that determines the type of a triangle (scalene, isosceles, equilateral) based on side lengths."
    },
    {
      "challengeTitle": "Type of a triangle",
      "challengeDescription": "Create a function that determines the type of a triangle (scalene, isosceles, equilateral) based on side lengths."
    },
    {
      "challengeTitle": "Type of a triangle",
      "challengeDescription": "Create a function that determines the type of a triangle (scalene, isosceles, equilateral) based on side lengths."
    },
    {
      "challengeTitle": "Type of a triangle",
      "challengeDescription": "Create a function that determines the type of a triangle (scalene, isosceles, equilateral) based on side lengths."
    },
    {
      "challengeTitle": "Type of a triangle",
      "challengeDescription": "Create a function that determines the type of a triangle (scalene, isosceles, equilateral) based on side lengths."
    },
    {
      "challengeTitle": "Type of a triangle",
      "challengeDescription": "Create a function that determines the type of a triangle (scalene, isosceles, equilateral) based on side lengths."
    },
    {
      "challengeTitle": "Basic: Loops",
      "challengeSubtopic": "Loops (for, while)",
      "challengeTitle": "Calculate the factorial",
      "challengeDescription": "Create a function to calculate the factorial of a given number using a for loop."
    },
    {
      "challengeTitle": "Sum of all prime numbers ",
      "challengeDescription": "Create a function to find the sum of all prime numbers up to a given number."
    },
    {
      "challengeTitle": "Print numbers",
      "challengeDescription": "Write a function that prints numbers from 1 to 10 using a for loop."
    },
    {
      "challengeTitle": "Number of vowels",
      "challengeDescription": "Write a function that counts the number of vowels in a string using a for loop."
    },
    {
      "challengeTitle": "Multiplication table",
      "challengeDescription": "Create a function that prints the multiplication table of a given number using a while loop."
    },
    {
      "challengeTitle": "Print the elements",
      "challengeDescription": "Implement a function that prints the elements of an array using a for loop. Create a function that prints a pattern of stars using nested for loops."
    },
    {
      "challengeTitle": "Sum of all numbers from 1",
      "challengeDescription": "Write a function that calculates the sum of all numbers from 1 to a given number using a for loop."
    },
    {
      "challengeTitle": "Generate a password",
      "challengeDescription": "Write a function that generates a random password of a given length using a while loop and Math.random()."
    },
    {
      "challengeTitle": "First prime number greater than a given number",
      "challengeDescription": "Implement a function that finds the first prime number greater than a given number using a for loop."
    },
    {
      "challengeTitle": "Key-value pairs",
      "challengeDescription": "Use a for loop to iterate through an object and print its key-value pairs."
    },
    {
      "challengeTitle": "The sum of digits",
      "challengeDescription": "Write a function that calculates the sum of digits in a given number using a while loop and % operator."
    },
    {
      "challengeTitle": "Skip multiples",
      "challengeDescription": "Create a function to print numbers from 1 to 100 but skip multiples of 5 using continue statement."
    },
    {
      "challengeTitle": "Dynamic table",
      "challengeDescription": "Implement a dynamic table that displays data from an array using a for loop and nested loops for rows and columns."
    },
    {
      "challengeTitle": "",
      "challengeDescription": ""
    },
    {
      "challengeTitle": "Basic: Functions",
      "challengeSubtopic": "Declaration, expression, arrow functions",
      "challengeTitle": "Arrow Function",
      "challengeDescription": " Write a function that takes two numbers as input and returns their product using an arrow function."
    },
    {
      "challengeTitle": "Reverse the order of words",
      "challengeDescription": "Write a function to reverse the order of words in a sentence."
    },
    {
      "challengeTitle": "Roman numerals",
      "challengeDescription": "Implement a function to convert a number to Roman numerals. Write a function to convert a Roman numeral to an integer."
    },
    {
      "challengeTitle": "Is empty?",
      "challengeDescription": "Create a function that checks if a string is empty or not."
    },
    {
      "challengeTitle": "Area of various shapes (circle, rectangle, triangle)",
      "challengeDescription": "Implement a function that calculates the area of a circle given its radius using an arrow function. Create a function that calculates the area of various shapes (circle, rectangle, triangle) based on user input."
    },
    {
      "challengeTitle": "Callback array function",
      "challengeDescription": "Write a function that takes an array and a callback function, and returns a new array after applying the callback to each element"
    },
    {
      "challengeTitle": "",
      "challengeDescription": ""
    },
    {
      "challengeTitle": "",
      "challengeDescription": ""
    },
    {
      "challengeTitle": "",
      "challengeDescription": ""
    },
    {
      "challengeTitle": "DOM Manupulation Challenges",
      "challengeTitle": "Login form with validation",
      "challengeDescription": "Create a form with input fields for name, email, and password. Implement a function that validates the form and displays appropriate error messages if the input is invalid."
    },
    {
      "challengeTitle": "Fetch data",
      "challengeDescription": "Write JavaScript code to fetch data from an API and display it on a webpage dynamically"
    },
    {
      "challengeTitle": "Interactive To-Do List",
      "challengeDescription": "Create an interactive to-do list with features like adding, removing, and marking tasks as completed. The to-do list should be updated dynamically on the webpage as tasks are added or marked completed."
    },
    {
      "challengeTitle": "Dark theme",
      "challengeDescription": "Implement a function to change the background color of a webpage every time a button is clicked"
    },
    {
      "challengeTitle": "Create and Append Elements",
      "challengeDescription": "Write a function that creates an HTML button element, sets its text challengeDescription, and appends it to an existing div with a given id."
    },
    {
      "challengeTitle": "Toggle Visibility",
      "challengeDescription": "Write a function that toggles the visibility of a div element when a button is clicked (show if hidden, hide if visible). "
    },
    {
      "challengeTitle": "Drag and Drop",
      "challengeDescription": "Implement drag and drop functionality for elements within a container using event listeners and DOM manipulation. Implement drag and drop functionality for elements within a container. Allow users to drag elements and drop them in different positions within the container."
    },
    {
      "challengeTitle": "Real-Time Chat Application",
      "challengeDescription": "Build a real-time chat application using WebSockets or Firebase or other asynchronous techniques for instant messaging. Users should be able to send and receive messages in real-time without the need for manual page refresh."
    },
    {
      "challengeTitle": "Toggle Password Visibility",
      "challengeDescription": "Create a form with an input field for a password. Add a checkbox that toggles the visibility of the password when checked/unchecked."
    },
    {
      "challengeTitle": "Image Gallery",
      "challengeDescription": "Create an image gallery with a grid of thumbnail images. When a thumbnail is clicked, display the full-sized image in a modal popup."
    },
    {
      "challengeTitle": "Dynamic Table Creation",
      "challengeDescription": "Write a function that creates an HTML table with a given number of rows and columns. Append the table to a specified element on the page."
    },
    {
      "challengeTitle": "Toggle Password Visibility",
      "challengeDescription": "Create a form with an input field for a password. Add a checkbox that toggles the visibility of the password when checked/unchecked."
    },
    {
      "challengeTitle": "Toggle Password Visibility",
      "challengeDescription": "Create a form with an input field for a password. Add a checkbox that toggles the visibility of the password when checked/unchecked."
    },
    {
      "challengeTitle": "Toggle Password Visibility",
      "challengeDescription": "Create a form with an input field for a password. Add a checkbox that toggles the visibility of the password when checked/unchecked."
    },
    {
      "challengeTitle": "Basic: Array Challenges",
      "challengeSubtopic": "Arrays and Array methods (forEach, map, filter, reduce)",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/arrayJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink",
      "challengeTitle": "Maximum and minimum",
      "challengeDescription": "Given an array of integers, write a function to find the maximum and minimum elements in the array. Implement a function to find the second smallest element in an array. Find the second largest element in an array."
    },
    {
      "challengeTitle": "Remove duplicates",
      "challengeDescription": "Write a function to remove all duplicates from an array and return the modified array without changing the order of elements."
    },
    {
      "challengeTitle": "Return sorted even numbers",
      "challengeDescription": "Implement a function that takes an array of numbers and returns a new array with only the even numbers sorted in ascending order using the sort() method."
    },
    {
      "challengeTitle": "Comparing arrays",
      "challengeDescription": "Write a function that takes two arrays and returns true if they have at least one common element, otherwise return false. Write a function to check if two arrays are equal. Create a function to find the intersection of two arrays. Implement a function to find the union of two arrays."
    },
    {
      "challengeTitle": "Filter",
      "challengeDescription": "Implement a higher-order function that filters an array based on a given condition"
    },
    {
      "challengeTitle": "Remove falsy values",
      "challengeDescription": "Create a function to remove all falsy values (false, null, 0, parenthesis, undefined, and NaN) from an array."
    },
    {
      "challengeTitle": "Array Sum",
      "challengeDescription": "Write a function that takes an array of numbers and returns the sum of all the elements in the array."
    },
    {
      "challengeTitle": "Spread Operator Usage",
      "challengeDescription": "Write a function that takes three separate arrays of fruits and combines them into a single array using the spread operator."
    },
    {
      "challengeTitle": "Merge an arrays",
      "challengeDescription": "Implement a function to merge two sorted arrays into one sorted array."
    },
    {
      "challengeTitle": "Rotate an array",
      "challengeDescription": "Create a function to rotate an array by a given number of positions."
    },
    {
      "challengeTitle": "Count the occurrences of each character",
      "challengeDescription": "Create a function to count the occurrences of each character in a string. Implement a function to find the longest word in a sentence. Implement a function to find the first non-repeating character in a string."
    },
    {
      "challengeTitle": "All possible subsets",
      "challengeDescription": "Write a function to generate all possible subsets of an array."
    },
    {
      "challengeTitle": "Shuffle the elements of an array",
      "challengeDescription": "Write a function to shuffle the elements of an array randomly."
    },
    {
      "challengeTitle": "Merge an arrays",
      "challengeDescription": "Implement a function to merge two sorted arrays into one sorted array."
    },
    {
      "challengeTitle": "Objects and Object-oriented programming",
      "challengeSubtopic": "Objects and Object-oriented programming",
      "challengeTitle": "Creating an objects",
      "challengeDescription": "Create an object representing a person with properties like name, age, and address. Access and update properties"
    },
    {
      "challengeTitle": "Access to keys and values",
      "challengeDescription": "Use the Object.keys() method to get all keys of an object. Use the Object.values() method to get all values of an object."
    },
    {
      "challengeTitle": "Сalculate the area of a rectangle",
      "challengeDescription": "Create an object method to calculate the area of a rectangle."
    },
    {
      "challengeTitle": "Comparing arrays",
      "challengeDescription": "Write a function that takes two arrays and returns true if they have at least one common element, otherwise return false. Write a function to check if two arrays are equal. Create a function to find the intersection of two arrays. Implement a function to find the union of two arrays."
    },
    {
      "challengeTitle": "Filter",
      "challengeDescription": "Implement a higher-order function that filters an array based on a given condition"
    },
    {
      "challengeTitle": "Remove falsy values",
      "challengeDescription": "Create a function to remove all falsy values (false, null, 0, parenthesis, undefined, and NaN) from an array."
    },
    {
      "challengeTitle": "Array Sum",
      "challengeDescription": "Write a function that takes an array of numbers and returns the sum of all the elements in the array."
    },
    {
      "challengeTitle": "Spread Operator Usage",
      "challengeDescription": "Write a function that takes three separate arrays of fruits and combines them into a single array using the spread operator."
    },
    {
      "challengeTitle": "Merge an arrays",
      "challengeDescription": "Implement a function to merge two sorted arrays into one sorted array."
    },
    {
      "challengeTitle": "Rotate an array",
      "challengeDescription": "Create a function to rotate an array by a given number of positions."
    },
    {
      "challengeTitle": "Count the occurrences of each character",
      "challengeDescription": "Create a function to count the occurrences of each character in a string. Implement a function to find the longest word in a sentence. Implement a function to find the first non-repeating character in a string."
    },
    {
      "challengeTitle": "All possible subsets",
      "challengeDescription": "Write a function to generate all possible subsets of an array."
    },
    {
      "challengeTitle": "Shuffle the elements of an array",
      "challengeDescription": "Write a function to shuffle the elements of an array randomly."
    },
    {
      "challengeTitle": "Merge an arrays",
      "challengeDescription": "Implement a function to merge two sorted arrays into one sorted array."
    },
    {
      "name": "algorithmicChallenges",
      "challengeType": "Algorithmic Challenges",
      "challengeTitle": "Fibonacci",
      "challengeDescription": "Implement a recursive function to find the nth number in the Fibonacci sequence. Write a function that generates the Fibonacci series up to a given number n."
    },
    {
      "challengeTitle": "FizzBuzz problem",
      "challengeDescription": "Solve the classic FizzBuzz problem: Write a function that prints numbers from 1 to n, but for multiples of 3, print Fizz, for multiples of 5, print Buzz, and for multiples of both 3 and 5, print FizzBuzz",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Two numbers add up to a specific target sum",
      "challengeDescription": "Given an array of integers, write an algorithm to find the two numbers that add up to a specific target sum. Optimize your solution for time complexity.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Improve performance of a slow JS function",
      "challengeDescription": "Improve the performance of a slow JavaScript function by refactoring it and using more efficient data structures or algorithms",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "The second highest number in an array",
      "challengeDescription": "Write a function to find the second highest number in an array of integers.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Find Missing Number",
      "challengeDescription": "Write a function that takes an array of integers containing numbers from 1 to n with one missing number, and returns the missing number.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "name": "asynchronousChallenges",
      "pageLink": "./asynchronousChallenges.html",
      "challengeSubtopic": "Asynchronous Challenges",
      "challengeTitle": "Asynchronous FETCH",
      "challengeDescription": "Write a function that simulates making a network request using Promises. Use this function to fetch data from an API and display it on the page once the data is received.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Error handling for the asynchronous function",
      "challengeDescription": "Implement error handling for the asynchronous function to handle rejected promises gracefully.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "FETCH from different API",
      "challengeDescription": "Write an asynchronous function that fetches data from two different APIs simultaneously and returns the combined results.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Delayed Execution",
      "challengeDescription": "Write a function that prints Hello, World after a delay of 2 seconds using setTimeout",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Parallel API Requests",
      "challengeDescription": "Write a function that makes parallel requests to multiple APIs and returns the combined results when all requests are complete.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Simple Timer",
      "challengeDescription": "Write a function that displays a countdown timer on a webpage, updating every second until it reaches zero.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Asynchronous File Reading",
      "challengeDescription": "Write a function concatenateFiles(filePaths, outputPath) that reads multiple files asynchronously from the provided file paths and concatenates their challengeDescription into a single output file specified by the outputPath.",
      "example": "concatenateFiles([file1.txt, file2.txt, file3.txt], output.txt). challengeDescriptions of file1.txt, file2.txt, file3.txt will be concatenated and written to output.txt",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Calculator using callbacks",
      "challengeDescription": "Build a simple calculator using callbacks for asynchronous arithmetic operations. ",
      "example": "parallelAPIRequests([https://api.example.com/data1, https://api.example.com/data2, https://api.example.com/data3]). Output: [result1, result2, result3]",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Promise-based function. Async/await syntax.",
      "challengeDescription": "Convert a callback-based function into a promise-based function. Refactor a promise-based function to use async/await syntax.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Parallel API Requests",
      "challengeDescription": "Write a function that makes parallel requests to multiple APIs and returns the combined results when all requests are complete.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Parallel API Requests",
      "challengeDescription": "Write a function that makes parallel requests to multiple APIs and returns the combined results when all requests are complete.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Parallel API Requests",
      "challengeDescription": "Write a function that makes parallel requests to multiple APIs and returns the combined results when all requests are complete.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Parallel API Requests",
      "challengeDescription": "Write a function that makes parallel requests to multiple APIs and returns the combined results when all requests are complete.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "name": "errorHandlingChallenges",
      "pageLink": "./errorHandlingChallenges.html",
      "challengeSubtopic": "Error Handling Challenges",
      "challengeTitle": "Errors in JSON",
      "challengeDescription": "Create a function that reads data from a JSON file and handles any potential errors that may occur during the process."
    },
    {
      "challengeTitle": "Negative numbers",
      "challengeDescription": "Implement a function that takes an array of numbers as input and throws an error if any of the numbers are negative",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Divide by Zero Error",
      "challengeDescription": "Write a function that takes two numbers as input and performs division. Handle the case when the second number is zero and throw an appropriate error.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Try-Catch Block",
      "challengeDescription": "Write a function that contains a try-catch block to handle potential errors when executing a piece of code",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Custom Error Classes",
      "challengeDescription": "Create custom error classes (e.g., ValidationError, AuthorizationError) that extend the Error class. Implement functions that can throw these custom errors based on specific conditions in your code.",
      "example": "function validateInput(input) {if (!input) {throw new ValidationError(Input is required.)",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Rejected promise",
      "challengeDescription": "Create a function that returns a rejected promise with a custom error message.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Loading spinner",
      "challengeDescription": "Create a loading spinner using async functions and DOM manipulation.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Rejected promise",
      "challengeDescription": "Create a function that returns a rejected promise with a custom error message.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Rejected promise",
      "challengeDescription": "Create a function that returns a rejected promise with a custom error message.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Promise.allSettled",
      "challengeDescription": "Use Promise.allSettled to fetch data from multiple APIs and handle both resolved and rejected promises.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "name": "functionalProgrammingChallenges",
      "pageLink": "./functionalProgrammingChallenges.html",
      "challengeSubtopic": "Functional Programming Challenges",
      "challengeTitle": "Recursion",
      "challengeDescription": "Write a recursive function to calculate the factorial of a given positive integer",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Uppercase",
      "challengeDescription": "Write a function that takes an array of strings and returns a new array with all strings converted to uppercase",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Map and Filter",
      "challengeDescription": "Write a function that takes an array of numbers, doubles each element using map, and filters out the even and the odd numbers using filter.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Reduce",
      "challengeDescription": "Write a function that takes an array of numbers and returns the sum of all elements using the reduce method",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Higher-Order Functions",
      "challengeDescription": "Write a higher-order function repeat(func, times) that takes a function func and a number times as arguments. The repeat function should call func times number of times.",
      "example": "function printHello() {console.log(Hello!);} repeat(printHello, 3); Output: Hello! Hello! Hello!",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Sum of Squares",
      "challengeDescription": "Write a function that takes an array of numbers and returns the sum of the squares of all the elements.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Currying and Partial Application",
      "challengeDescription": "Write a function multiplyCurry(a) that demonstrates currying and returns a function b that takes another argument and returns the product of a and b.",
      "example": "multiplyCurry(5)(3). Output: 15",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Sum of Squares",
      "challengeDescription": "Write a function that takes an array of numbers and returns the sum of the squares of all the elements.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Sum of Squares",
      "challengeDescription": "Write a function that takes an array of numbers and returns the sum of the squares of all the elements.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Sum of Squares",
      "challengeDescription": "Write a function that takes an array of numbers and returns the sum of the squares of all the elements.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Sum of Squares",
      "challengeDescription": "Write a function that takes an array of numbers and returns the sum of the squares of all the elements.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    },
    {
      "challengeTitle": "Sum of Squares",
      "challengeDescription": "Write a function that takes an array of numbers and returns the sum of the squares of all the elements.",
      "image": "./images/surfing-g130578680_1280.jpg",
      "projectLink": "./challenges/startersJsChallenges.html",
      "projectGithubLink": "path/to/projectGithubLink"
    }
  ]
}
